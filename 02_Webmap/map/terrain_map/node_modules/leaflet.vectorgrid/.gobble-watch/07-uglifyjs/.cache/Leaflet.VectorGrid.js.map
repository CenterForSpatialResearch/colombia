{"version":3,"file":"/home/ivan/devel/Leaflet.VectorGrid/.gobble-watch/07-uglifyjs/241/Leaflet.VectorGrid.min.js","sources":["/home/ivan/devel/Leaflet.VectorGrid/.gobble-watch/01-concat/245/Leaflet.VectorGrid.js"],"names":["L","SVG","Tile","extend","initialize","tileSize","options","prototype","call","this","_size","_initContainer","_container","setAttribute","x","y","join","getContainer","onAdd","Util","FalseFn","create","_addPath","layer","_rootGroup","appendChild","_path","svg","tile","opts","Canvas","_layers","_drawnLayers","container","document","createElement","_ctx","getContext","canvas","VectorGrid","GridLayer","rendererFactory","vectorTileLayerStyles","createTile","coords","done","renderer","getTileSize","vectorTilePromise","_getVectorTilePromise","then","vectorTile","layerName","layers","pxPerExtent","extent","layerStyle","Path","i","features","feat","type","_mkFeatureParts","styleOptions","Function","properties","z","Array","j","style","fill","_initPath","_updateStyle","_updatePoly","requestAnimFrame","bind","rings","geometry","_parts","ring","part","coord","push","point","vectorGrid","Slicer","vectorTileLayerName","maxZoom","geojson","_slicers","objects","geojsonvt","topojson","feature","tileLayers","slicer","slicedTileLayer","getTile","vectorTileLayer","name","length","tags","Promise","resolve","Protobuf","subdomains","url","_url","_getSubdomain","TileLayer","tileUrl","template","s","fetch","response","ok","blob","reader","FileReader","addEventListener","pbf","Pbf","result","VectorTile","readAsArrayBuffer","json","feats","loadGeometry","protobuf"],"mappings":"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","sourcesContent":["\n\nL.SVG.Tile = L.SVG.extend({\n\n\tinitialize: function (tileSize, options) {\n\t\tL.SVG.prototype.initialize.call(this, options);\n\t\tthis._size = tileSize;\n\n\t\tthis._initContainer();\n\t\tthis._container.setAttribute('width', this._size.x);\n\t\tthis._container.setAttribute('height', this._size.y);\n\t\tthis._container.setAttribute('viewBox', [0, 0, this._size.x, this._size.y].join(' '));\n\t},\n\n\tgetContainer: function() {\n\t\treturn this._container;\n\t},\n\n// \tonAdd: function() {},\n\tonAdd: L.Util.FalseFn,\n\n\t_initContainer: function() {\n\t\tL.SVG.prototype._initContainer.call(this);\n\t\tvar rect =  L.SVG.create('rect');\n\n// \t\trect.setAttribute('x', 0);\n// \t\trect.setAttribute('y', 0);\n// \t\trect.setAttribute('width', this._size.x);\n// \t\trect.setAttribute('height', this._size.y);\n// \t\trect.setAttribute('fill', 'transparent');\n// \t\trect.setAttribute('stroke', 'black');\n// \t\trect.setAttribute('stroke-width', 2);\n// \t\tthis._rootGroup.appendChild(rect);\n\t},\n\n\t/// TODO: Modify _initPath to include an extra parameter, a group name\n\t/// to order symbolizers by z-index\n\n\t_addPath: function (layer) {\n\t\tthis._rootGroup.appendChild(layer._path);\n\t},\n\n});\n\n\nL.svg.tile = function(tileSize, opts){\n\treturn new L.SVG.Tile(tileSize, opts);\n}\n\n\n\n\n\n\nL.Canvas.Tile = L.Canvas.extend({\n\n\tinitialize: function (tileSize, options) {\n\t\tL.Canvas.prototype.initialize.call(this, options);\n\t\tthis._size = tileSize;\n\n\t\tthis._initContainer();\n\t\tthis._container.setAttribute('width', this._size.x);\n\t\tthis._container.setAttribute('height', this._size.y);\n\t\tthis._layers = {};\n\t\tthis._drawnLayers = {};\n\t},\n\n\tgetContainer: function() {\n\t\treturn this._container;\n\t},\n\n\tonAdd: L.Util.FalseFn,\n\n\t_initContainer: function () {\n\t\tvar container = this._container = document.createElement('canvas');\n\n// \t\tL.DomEvent\n// \t\t\t.on(container, 'mousemove', L.Util.throttle(this._onMouseMove, 32, this), this)\n// \t\t\t.on(container, 'click dblclick mousedown mouseup contextmenu', this._onClick, this)\n// \t\t\t.on(container, 'mouseout', this._handleMouseOut, this);\n\n\t\tthis._ctx = container.getContext('2d');\n\t},\n\n\n\t/// TODO: Modify _initPath to include an extra parameter, a group name\n\t/// to order symbolizers by z-index\n\n});\n\n\nL.canvas.tile = function(tileSize, opts){\n\treturn new L.Canvas.Tile(tileSize, opts);\n}\n\n\n\n\n\n\nL.VectorGrid = L.GridLayer.extend({\n\n\toptions: {\n\t\trendererFactory: L.svg.tile,\n\t\tvectorTileLayerStyles: {}\n\t},\n\n\tcreateTile: function(coords, done) {\n\t\tvar renderer = this.options.rendererFactory(this.getTileSize(), this.options);\n\n\t\tvar vectorTilePromise = this._getVectorTilePromise(coords);\n\n\n\t\tvectorTilePromise.then( function renderTile(vectorTile) {\n\n\t\t\tfor (var layerName in vectorTile.layers) {\n\t\t\t\tvar layer = vectorTile.layers[layerName];\n\n\t\t\t\t/// NOTE: THIS ASSUMES SQUARE TILES!!!!!1!\n\t\t\t\tvar pxPerExtent = this.getTileSize().x / layer.extent;\n\n\t\t\t\tvar layerStyle = this.options.vectorTileLayerStyles[ layerName ] ||\n\t\t\t\tL.Path.prototype.options;\n\n\t\t\t\tfor (var i in layer.features) {\n\t\t\t\t\tvar feat = layer.features[i];\n\n\t\t\t\t\tif (feat.type > 1) { // Lines, polygons\n\n\t\t\t\t\t\tthis._mkFeatureParts(feat, pxPerExtent);\n\n\t\t\t\t\t\t/// Style can be a callback that is passed the feature's\n\t\t\t\t\t\t/// properties and tile zoom level...\n\t\t\t\t\t\tvar styleOptions = (layerStyle instanceof Function) ?\n\t\t\t\t\t\tlayerStyle(feat.properties, coords.z) :\n\t\t\t\t\t\tlayerStyle;\n\n\t\t\t\t\t\tif (!(styleOptions instanceof Array)) {\n\t\t\t\t\t\t\tstyleOptions = [styleOptions];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t/// Style can be an array of styles, for styling a feature\n\t\t\t\t\t\t/// more than once...\n\t\t\t\t\t\tfor (var j in styleOptions) {\n\t\t\t\t\t\t\tvar style = L.extend({}, L.Path.prototype.options, styleOptions[j]);\n\n\t\t\t\t\t\t\tif (feat.type === 1) { // Points\n\t\t\t\t\t\t\t\tstyle.fill = false;\n\t\t\t\t\t\t\t} else if (feat.type === 2) {\t// Polyline\n\t\t\t\t\t\t\t\tstyle.fill = false;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfeat.options = style;\n\t\t\t\t\t\t\trenderer._initPath( feat );\n\t\t\t\t\t\t\trenderer._updateStyle( feat );\n\n\t\t\t\t\t\t\tif (feat.type === 1) { // Points\n\t\t\t\t\t\t\t\t// \t\t\t\t\t\t\tstyle.fill = false;\n\t\t\t\t\t\t\t} else if (feat.type === 2) {\t// Polyline\n\t\t\t\t\t\t\t\tstyle.fill = false;\n\t\t\t\t\t\t\t\trenderer._updatePoly(feat, false);\n\t\t\t\t\t\t\t} else if (feat.type === 3) {\t// Polygon\n\t\t\t\t\t\t\t\trenderer._updatePoly(feat, true);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\trenderer._addPath( feat );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Feat is a point (type === 1)\n\n\t\t\t\t\t\t/// FIXME!!!\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tL.Util.requestAnimFrame(done);\n\t\t}.bind(this));\n\n\t\treturn renderer.getContainer();\n\t},\n\n\n\n\t// Fills up feat._parts based on the geometry and pxPerExtent,\n\t// pretty much as L.Polyline._projectLatLngs and L.Polyline._clipPoints\n\t// would do but simplified as the vectors are already simplified/clipped.\n\t_mkFeatureParts: function(feat, pxPerExtent) {\n\n\t\tvar rings = feat.geometry;\n\n\t\tfeat._parts = [];\n\t\tfor (var i in rings) {\n\t\t\tvar ring = rings[i];\n\t\t\tvar part = [];\n\t\t\tfor (var j in ring) {\n\t\t\t\tvar coord = ring[j];\n\t\t\t\tif ('x' in coord) {\n\t\t\t\t\t// Protobuf vector tiles return {x: , y:}\n\t\t\t\t\tpart.push(L.point(coord.x * pxPerExtent, coord.y * pxPerExtent));\n\t\t\t\t} else {\n\t\t\t\t\t// Geojson-vt returns [,]\n\t\t\t\t\tpart.push(L.point(coord[0] * pxPerExtent, coord[1] * pxPerExtent));\n\t\t\t\t}\n\t\t\t}\n\t\t\tfeat._parts.push(part);\n\t\t}\n\n\t},\n\n});\n\n\n\nL.vectorGrid = function (options) {\n\treturn new L.VectorGrid(options);\n};\n\n\n\n\n\n\n\n\n\n// geojson-vt powered!\n// NOTE: Assumes the global `geojsonvt` exists!!!\nL.VectorGrid.Slicer = L.VectorGrid.extend({\n\n\toptions: {\n\t\tvectorTileLayerName: 'sliced',\n\t\textent: 4096,\t// Default for geojson-vt\n\t\tmaxZoom: 14  \t// Default for geojson-vt\n\t},\n\n\tinitialize: function(geojson, options) {\n\t\tL.VectorGrid.prototype.initialize.call(this, options);\n\n\n\t\tthis._slicers = {};\n\t\tif (geojson.type && geojson.type === 'Topology') {\n\t\t\t// geojson is really a topojson\n\t\t\tfor (var layerName in geojson.objects) {\n\t\t\t\tthis._slicers[layerName] = geojsonvt(\n\t\t\t\t\ttopojson.feature(geojson, geojson.objects[layerName])\n\t\t\t\t, this.options);\n// \t\t\t\tconsole.log('topojson layer:', layerName);\n\t\t\t}\n\t\t} else {\n\t\t\t// For a geojson, create just one vectortilelayer named with the value\n\t\t\t// of the option.\n\t\t\t// Inherits available options from geojson-vt!\n\t\t\tthis._slicers[this.options.vectorTileLayerName] = geojsonvt(geojson, this.options);\n\t\t}\n\n\t},\n\n\t_getVectorTilePromise: function(coords) {\n\n\t\tvar tileLayers = {};\n\n\t\tfor (var layerName in this._slicers) {\n\t\t\tvar slicer = this._slicers[layerName];\n\t\t\tvar slicedTileLayer = slicer.getTile(coords.z, coords.x, coords.y);\n\n// \t\t\tconsole.log(coords, slicedTileLayer && slicedTileLayer.features && slicedTileLayer.features.length || 0);\n\n\t\t\tif (slicedTileLayer) {\n\t\t\t\tvar vectorTileLayer = {\n\t\t\t\t\tfeatures: [],\n\t\t\t\t\textent: this.options.extent,\n\t\t\t\t\tname: this.options.vectorTileLayerName,\n\t\t\t\t\tlength: slicedTileLayer.features.length\n\t\t\t\t}\n\n\t\t\t\tfor (var i in slicedTileLayer.features) {\n\t\t\t\t\tvar feat = {\n\t\t\t\t\t\tgeometry: slicedTileLayer.features[i].geometry,\n\t\t\t\t\t\tproperties: slicedTileLayer.features[i].tags,\n\t\t\t\t\t\ttype: slicedTileLayer.features[i].type\t// 1 = point, 2 = line, 3 = polygon\n\t\t\t\t\t}\n\t\t\t\t\tvectorTileLayer.features.push(feat);\n\t\t\t\t}\n\n\t\t\t\ttileLayers[layerName] = vectorTileLayer;\n\t\t\t}\n\n\t\t}\n\n\t\treturn new Promise(function(resolve){ return resolve({ layers: tileLayers })});\n\t},\n\n});\n\n\nL.vectorGrid.slicer = function (geojson, options) {\n\treturn new L.VectorGrid.Slicer(geojson, options);\n};\n\n\n\n\n\n// Network & Protobuf powered!\n// NOTE: Assumes the globals `VectorTile` and `Pbf` exist!!!\nL.VectorGrid.Protobuf = L.VectorGrid.extend({\n\n\toptions: {\n\t\tsubdomains: 'abc',\t// Like L.TileLayer\n\t},\n\n\n\tinitialize: function(url, options) {\n\t\t// Inherits options from geojson-vt!\n// \t\tthis._slicer = geojsonvt(geojson, options);\n\t\tthis._url = url;\n\t\tL.VectorGrid.prototype.initialize.call(this, options);\n\t},\n\n\n\t_getSubdomain: L.TileLayer.prototype._getSubdomain,\n\n\n\t_getVectorTilePromise: function(coords) {\n\t\tvar tileUrl = L.Util.template(this._url, L.extend({\n\t\t\ts: this._getSubdomain(coords),\n\t\t\tx: coords.x,\n\t\t\ty: coords.y,\n\t\t\tz: coords.z\n// \t\t\tz: this._getZoomForUrl()\t/// TODO: Maybe replicate TileLayer's maxNativeZoom\n\t\t}, this.options));\n\n\t\treturn fetch(tileUrl).then(function(response){\n\n\t\t\tif (!response.ok) {\n\t\t\t\treturn {layers:[]};\n\t\t\t}\n\n\t\t\treturn response.blob().then( function (blob) {\n// \t\t\t\tconsole.log(blob);\n\n\t\t\t\tvar reader = new FileReader();\n\t\t\t\treturn new Promise(function(resolve){\n\t\t\t\t\treader.addEventListener(\"loadend\", function() {\n\t\t\t\t\t\t// reader.result contains the contents of blob as a typed array\n\n\t\t\t\t\t\t// blob.type === 'application/x-protobuf'\n\t\t\t\t\t\tvar pbf = new Pbf( reader.result );\n// \t\t\t\t\t\tconsole.log(pbf);\n\t\t\t\t\t\treturn resolve(new vectorTile.VectorTile( pbf ));\n\n\t\t\t\t\t});\n\t\t\t\t\treader.readAsArrayBuffer(blob);\n\t\t\t\t});\n\t\t\t});\n\t\t}).then(function(json){\n\n// \t\t\tconsole.log('Vector tile:', json.layers);\n// \t\t\tconsole.log('Vector tile water:', json.layers.water);\t// Instance of VectorTileLayer\n\n\t\t\t// Normalize feature getters into actual instanced features\n\t\t\tfor (var layerName in json.layers) {\n\t\t\t\tvar feats = [];\n\n\t\t\t\tfor (var i=0; i<json.layers[layerName].length; i++) {\n\t\t\t\t\tvar feat = json.layers[layerName].feature(i);\n\t\t\t\t\tfeat.geometry = feat.loadGeometry();\n\t\t\t\t\tfeats.push(feat);\n\t\t\t\t}\n\n\t\t\t\tjson.layers[layerName].features = feats;\n\t\t\t}\n\n\t\t\treturn json;\n\t\t});\n\t}\n});\n\n\nL.vectorGrid.protobuf = function (url, options) {\n\treturn new L.VectorGrid.Protobuf(url, options);\n};\n\n\n\n\n//# sourceMappingURL=/home/ivan/devel/Leaflet.VectorGrid/.gobble-watch/01-concat/245/Leaflet.VectorGrid.js.map\n"]}