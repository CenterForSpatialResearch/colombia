'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pickLayers = pickLayers;

var _luma = require('luma.gl');

/* eslint-disable max-depth, max-statements */
function pickLayers(gl, _ref) {
  var layers = _ref.layers,
      pickingFBO = _ref.pickingFBO,
      _ref$uniforms = _ref.uniforms,
      uniforms = _ref$uniforms === undefined ? {} : _ref$uniforms,
      x = _ref.x,
      y = _ref.y,
      mode = _ref.mode;

  // Convert from canvas top-left to WebGL bottom-left coordinates
  // And compensate for pixelRatio
  var pixelRatio = typeof window !== 'undefined' ? window.devicePixelRatio : 1;
  var deviceX = x * pixelRatio;
  var deviceY = gl.canvas.height - y * pixelRatio;

  // TODO - just return glContextWithState once luma updates
  var pickedInfos = [];

  // Make sure we clear scissor test and fbo bindings in case of exceptions
  // We are only interested in one pixel, no need to render anything else
  (0, _luma.glContextWithState)(gl, {
    frameBuffer: pickingFBO,
    framebuffer: pickingFBO,
    scissorTest: { x: deviceX, y: deviceY, w: 1, h: 1 }
  }, function () {
    var zOrder = 0;

    for (var i = layers.length - 1; i >= 0; --i) {
      var layer = layers[i];

      if (layer.props.visible && layer.props.pickable) {
        // Clear the frame buffer, render and sample
        gl.clear(_luma.GL.COLOR_BUFFER_BIT | _luma.GL.DEPTH_BUFFER_BIT);
        var info = createInfo({
          layer: layer,
          pixel: [x, y],
          devicePixel: [deviceX, deviceY],
          pixelRatio: pixelRatio
        });

        layer.pickLayer({
          info: info,
          uniforms: uniforms,
          pickEnableUniforms: { renderPickingBuffer: 1, pickingEnabled: 1 },
          pickDisableUniforms: { renderPickingBuffer: 0, pickingEnabled: 0 },
          deviceX: deviceX, deviceY: deviceY,
          mode: mode
        });

        if (info.index >= 0) {
          info.picked = true;
          info.zOrder = zOrder++;
          // If props.data is an indexable array, get the object
          if (Array.isArray(layer.props.data)) {
            info.object = layer.props.data[info.index];
          }
        }

        pickedInfos.push(info);
      }
    }
  });

  // Calling callbacks can have async interactions with React
  // which nullifies layer.state.
  var unhandledPickInfos = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = pickedInfos[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var info = _step.value;

      var handled = null;
      switch (mode) {
        case 'click':
          handled = info.layer.props.onClick(info);break;
        case 'hover':
          handled = info.layer.props.onHover(info);break;
        default:
          throw new Error('unknown pick type');
      }

      if (!handled) {
        unhandledPickInfos.push(info);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return unhandledPickInfos;
}
/* eslint-enable max-depth, max-statements */

/* global window */
function createInfo(_ref2) {
  var info = _ref2.info,
      layer = _ref2.layer,
      pixel = _ref2.pixel,
      devicePixel = _ref2.devicePixel,
      pixelRatio = _ref2.pixelRatio;

  // Assign a number of potentially useful props to the "info" object
  return {
    layer: layer,
    index: -1,
    picked: false,
    x: pixel[0],
    y: pixel[1],
    pixel: pixel,
    devicePixel: devicePixel,
    pixelRatio: pixelRatio,
    lngLat: layer.unproject(pixel)
  };
}
//# sourceMappingURL=data:application/json;base64,