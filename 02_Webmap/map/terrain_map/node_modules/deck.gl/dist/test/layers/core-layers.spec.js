'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Copyright (c) 2015 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/* eslint-disable func-style, no-console, max-len */


// Import private method to test that layers can successfully be updated


var _tapeCatch = require('tape-catch');

var _tapeCatch2 = _interopRequireDefault(_tapeCatch);

require('luma.gl/headless');

var _luma = require('luma.gl');

var _ = require('../..');

var _lib = require('../../lib');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import CHOROPLETHS from '../../example/data/sf.zip.geo.json';
// const HEXAGONS_FILE = './example/data/hexagons.csv';
// const POINTS_FILE = './example/data/sf.bike.parking.csv';

var gl = (0, _luma.createGLContext)();

var FIXTURE = {

  layerState: {
    oldLayers: [],
    gl: gl,
    scene: new _luma.Scene(gl)
  },

  mapSize: {
    width: 800,
    height: 640
  },

  mapState: {
    latitude: 37.751537058389985,
    longitude: -122.42694203247012,
    zoom: 11.5
  },

  choropleths: [],
  hexagons: [],
  points: [{ position: [100, 100], color: [255, 0, 0] }],
  arcs: [{ sourcePosition: [0, 0], targetPosition: [1, 3], color: [255, 0, 0] }]
};

(0, _tapeCatch2.default)('ScreenGridLayer#constructor', function (t) {
  var points = FIXTURE.points;


  var layer = new _.ScreenGridLayer({
    data: points,
    pickable: false,
    opacity: 0.06
  });

  t.ok(layer, 'ScreenGridLayer created');
  t.end();
});

(0, _tapeCatch2.default)('ChoroplethLayer#constructor', function (t) {
  var choropleths = FIXTURE.choropleths;


  var layer = new _.ChoroplethLayer({
    data: choropleths,
    opacity: 0.8,
    pickable: false,
    drawContour: true
  });

  t.ok(layer, 'ChoroplethLayer created');
  t.end();
});

(0, _tapeCatch2.default)('ScatterplotLayer#constructor', function (t) {
  var mapSize = FIXTURE.mapSize,
      mapState = FIXTURE.mapState,
      points = FIXTURE.points;


  var layer = new _.ScatterplotLayer({
    data: points,
    pickable: true
  });
  t.ok(layer instanceof _.ScatterplotLayer, 'ScatterplotLayer created');

  var emptyLayer = new _.ScatterplotLayer({
    id: 'emptyScatterplotLayer',
    data: [],
    pickable: true
  });
  t.ok(emptyLayer instanceof _.ScatterplotLayer, 'Empty ScatterplotLayer created');

  t.doesNotThrow(function () {
    return new _.ScatterplotLayer({
      id: 'nullScatterplotLayer',
      data: null,
      pickable: true
    });
  }, 'Null ScatterplotLayer did not throw exception');

  var layerManager = new _lib.LayerManager({ gl: gl }).setContext(_extends({}, mapState, mapSize));
  t.doesNotThrow(function () {
    return layerManager.updateLayers({ newLayers: [layer, emptyLayer] });
  }, 'ScatterplotLayer update does not throw');

  t.end();
});

(0, _tapeCatch2.default)('ArcLayer#constructor', function (t) {
  var mapSize = FIXTURE.mapSize,
      mapState = FIXTURE.mapState,
      arcs = FIXTURE.arcs;


  var layer = new _.ArcLayer({
    id: 'arcLayer',
    data: arcs,
    pickable: true
  });
  t.ok(layer instanceof _.ArcLayer, 'ArcLayer created');

  var emptyLayer = new _.ArcLayer({
    id: 'emptyArcLayer',
    data: [],
    pickable: true
  });
  t.ok(emptyLayer instanceof _.ArcLayer, 'Empty ArcLayer created');

  t.doesNotThrow(function () {
    return new _.ArcLayer({
      id: 'nullArcLayer',
      data: null,
      pickable: true
    });
  }, 'Null ArcLayer did not throw exception');

  var layerManager = new _lib.LayerManager({ gl: gl }).setContext(_extends({}, mapState, mapSize));
  t.doesNotThrow(function () {
    return layerManager.updateLayers({ newLayers: [layer, emptyLayer] });
  }, 'ArcLayer update does not throw');

  t.end();
});
//# sourceMappingURL=data:application/json;base64,