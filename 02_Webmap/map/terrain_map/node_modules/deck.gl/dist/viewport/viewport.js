'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.COORDINATE_SYSTEM = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _desc, _value, _class; // View and Projection Matrix calculations for mapbox-js style
// map view properties
//
// ATTRIBUTION:
// Projection matrix creation are intentionally kept compatible with
// mapbox-gl's implementation to ensure that seamless interoperation
// with mapbox and react-map-gl.
// See: transform.js in https://github.com/mapbox/mapbox-gl-js

var _perspective = require('viewport-mercator-project/perspective');

Object.defineProperty(exports, 'COORDINATE_SYSTEM', {
  enumerable: true,
  get: function get() {
    return _perspective.COORDINATE_SYSTEM;
  }
});

var _perspective2 = _interopRequireDefault(_perspective);

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _glMatrix = require('gl-matrix');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

function fp64ify(a) {
  var hiPart = Math.fround(a);
  var loPart = a - Math.fround(a);
  return [hiPart, loPart];
}

var WebGLViewport = (_class = function (_Viewport) {
  _inherits(WebGLViewport, _Viewport);

  function WebGLViewport(options) {
    _classCallCheck(this, WebGLViewport);

    var _this = _possibleConstructorReturn(this, (WebGLViewport.__proto__ || Object.getPrototypeOf(WebGLViewport)).call(this, options));

    _this._calculateWebGLMatrices();
    return _this;
  }

  /**
   * Returns a projection matrix suitable for shaders
   * @return {Float32Array} - 4x4 projection matrix that can be used in shaders
   */


  _createClass(WebGLViewport, [{
    key: 'getProjectionMatrix',
    value: function getProjectionMatrix() {
      return this.glProjectionMatrix;
    }
  }, {
    key: 'getProjectionMatrixFP64',
    value: function getProjectionMatrixFP64() {
      return this.glProjectionMatrixFP64;
    }
  }, {
    key: 'getProjectionMatrixUncentered',
    value: function getProjectionMatrixUncentered() {
      return this.glProjectionMatrixUncentered;
    }
  }, {
    key: 'getWebGLMatrices',
    value: function getWebGLMatrices() {
      return {
        projectionMatrix: this.glProjectionMatrix,
        projectionFP64: this.glProjectionMatrixFP64
      };
    }
  }, {
    key: 'getUniforms',
    value: function getUniforms() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$projectionMode = _ref.projectionMode,
          projectionMode = _ref$projectionMode === undefined ? _perspective.COORDINATE_SYSTEM.LNGLAT : _ref$projectionMode,
          _ref$positionOrigin = _ref.positionOrigin,
          positionOrigin = _ref$positionOrigin === undefined ? [0, 0] : _ref$positionOrigin,
          _ref$modelMatrix = _ref.modelMatrix,
          modelMatrix = _ref$modelMatrix === undefined ? null : _ref$modelMatrix;

      // TODO: move the following line to initialization so that it's done only once
      var positionOriginPixels = this.projectFlat(positionOrigin);

      var projectedPositionOrigin = [positionOriginPixels[0], positionOriginPixels[1], 0.0, 1.0];
      var projections = this.getProjections();
      var viewProjectionMatrix = projections.viewProjectionMatrix;


      var projectionCenter = _glMatrix.vec4.transformMat4([], projectedPositionOrigin, viewProjectionMatrix);

      // If necessary add modelMatrix to clipSpace projection
      if (modelMatrix) {
        _glMatrix.mat4.multiply(viewProjectionMatrix, viewProjectionMatrix, modelMatrix);
      }

      return {
        // Projection mode values
        projectionMode: projectionMode,
        projectionCenter: projectionCenter,

        // Main projection matrices
        projectionMatrix: this.glProjectionMatrix,
        projectionFP64: this.glProjectionMatrixFP64,
        projectionPixelsPerUnit: this.pixelsPerMeter,
        projectionScale: this.scale,
        projectionScaleFP64: fp64ify(this.scale),

        // TODO - deprecated, remove
        mercatorScale: Math.pow(2, this.zoom),
        mercatorCenter: this.center
        // projectionMatrixCentered: this.glProjectionMatrix,
        // projectionMatrixUncentered: this.glProjectionMatrixUncentered
        // _ONE uniform is hack: make tan_fp64() callable in existing 32bit layers
      };
    }
  }, {
    key: '_calculateWebGLMatrices',
    value: function _calculateWebGLMatrices() {
      this.glProjectionMatrix = new Float32Array(this.viewProjectionMatrix);
      this.glProjectionMatrixFP64 = new Float32Array(32);
      this._dy64ifyProjectionMatrix();
    }
  }, {
    key: '_dy64ifyProjectionMatrix',
    value: function _dy64ifyProjectionMatrix() {
      // Transpose the projection matrix to column major for GLSL.
      for (var i = 0; i < 4; ++i) {
        for (var j = 0; j < 4; ++j) {
          var _fp64ify = fp64ify(this.viewProjectionMatrix[j * 4 + i]);

          var _fp64ify2 = _slicedToArray(_fp64ify, 2);

          this.glProjectionMatrixFP64[(i * 4 + j) * 2] = _fp64ify2[0];
          this.glProjectionMatrixFP64[(i * 4 + j) * 2 + 1] = _fp64ify2[1];
        }
      }
    }
  }]);

  return WebGLViewport;
}(_perspective2.default), (_applyDecoratedDescriptor(_class.prototype, 'getProjectionMatrix', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'getProjectionMatrix'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'getProjectionMatrixFP64', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'getProjectionMatrixFP64'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'getProjectionMatrixUncentered', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'getProjectionMatrixUncentered'), _class.prototype)), _class);
exports.default = WebGLViewport;
//# sourceMappingURL=data:application/json;base64,