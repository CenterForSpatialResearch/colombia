'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.COORDINATE_SYSTEM = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _desc, _value, _class; // View and Projection Matrix calculations for mapbox-js style
// map view properties
//
// ATTRIBUTION:
// Projection matrix creation are intentionally kept compatible with
// mapbox-gl's implementation to ensure that seamless interoperation
// with mapbox and react-map-gl.
// See: transform.js in https://github.com/mapbox/mapbox-gl-js

// gl-matrix is a large dependency for a small module.
// However since it is used by mapbox etc, it should already be present
// in most target application bundles.


var _glMatrix = require('gl-matrix');

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

// CONSTANTS

var PI = Math.PI;
var PI_4 = PI / 4;
var DEGREES_TO_RADIANS = PI / 180;
var RADIANS_TO_DEGREES = 180 / PI;
var TILE_SIZE = 512;
var WORLD_SCALE = TILE_SIZE / (2 * PI);

var DEFAULT_MAP_STATE = {
  latitude: 37,
  longitude: -122,
  zoom: 11,
  pitch: 0,
  bearing: 0,
  altitude: 1.5
};

// EXPORTS

var COORDINATE_SYSTEM = exports.COORDINATE_SYSTEM = {
  // Positions are interpreted as [lng,lat,elevation], distances as meters
  LNGLAT: 1.0,
  // Positions are interpreted as meter offsets, distances as meters
  METERS: 2.0,
  // Positions and distances are not transformed
  IDENTITY: 0.0
};

var Viewport = (_class = function () {
  /**
   * @classdesc
   * Manages coordinate system transformations for deck.gl.
   *
   * Note: The Viewport is immutable in the sense that it only has accessors.
   * A new viewport instance should be created if any parameters have changed.
   *
   * @class
   * @param {Object} opt - options
   * @param {Boolean} mercator=true - Whether to use mercator projection
   *
   * @param {Number} opt.width=1 - Width of "viewport" or window
   * @param {Number} opt.height=1 - Height of "viewport" or window
   * @param {Array} opt.center=[0, 0] - Center of viewport
   *   [longitude, latitude] or [x, y]
   * @param {Number} opt.scale=1 - Either use scale or zoom
   * @param {Number} opt.pitch=0 - Camera angle in degrees (0 is straight down)
   * @param {Number} opt.bearing=0 - Map rotation in degrees (0 means north is up)
   * @param {Number} opt.altitude= - Altitude of camera in screen units
   *
   * Web mercator projection short-hand parameters
   * @param {Number} opt.latitude - Center of viewport on map (alternative to opt.center)
   * @param {Number} opt.longitude - Center of viewport on map (alternative to opt.center)
   * @param {Number} opt.zoom - Scale = Math.pow(2,zoom) on map (alternative to opt.scale)
    * Notes:
   *  - Only one of center or [latitude, longitude] can be specified
   *  - [latitude, longitude] can only be specified when "mercator" is true
   *  - Altitude has a default value that matches assumptions in mapbox-gl
   *  - width and height are forced to 1 if supplied as 0, to avoid
   *    division by zero. This is intended to reduce the burden of apps to
   *    to check values before instantiating a Viewport.
   */
  /* eslint-disable complexity */
  function Viewport() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        width = _ref.width,
        height = _ref.height,
        latitude = _ref.latitude,
        longitude = _ref.longitude,
        zoom = _ref.zoom,
        pitch = _ref.pitch,
        bearing = _ref.bearing,
        altitude = _ref.altitude,
        mercatorEnabled = _ref.mercatorEnabled;

    _classCallCheck(this, Viewport);

    // Viewport - support undefined arguments
    /* eslint-disable max-len */
    this.width = width !== undefined ? width : DEFAULT_MAP_STATE.width;
    this.height = height !== undefined ? height : DEFAULT_MAP_STATE.height;
    this.zoom = zoom !== undefined ? zoom : DEFAULT_MAP_STATE.zoom;
    this.latitude = latitude !== undefined ? latitude : DEFAULT_MAP_STATE.latitude;
    this.longitude = longitude !== undefined ? longitude : DEFAULT_MAP_STATE.longitude;
    this.bearing = bearing !== undefined ? bearing : DEFAULT_MAP_STATE.bearing;
    this.pitch = pitch !== undefined ? pitch : DEFAULT_MAP_STATE.pitch;
    this.altitude = altitude !== undefined ? altitude : DEFAULT_MAP_STATE.altitude;
    this.mercatorEnabled = mercatorEnabled !== undefined ? mercatorEnabled : true;
    /* eslint-enable max-len */

    // Silently allow apps to send in 0,0
    this.width = this.width || 1;
    this.height = this.height || 1;

    this._initialize();

    // Object.seal(this);
    // Object.freeze(this);
  }
  /* eslint-enable complexity */

  /**
   * Projects latitude and longitude to pixel coordinates in window
   * using viewport projection parameters
   * - [longitude, latitude] to [x, y]
   * - [longitude, latitude, Z] => [x, y, z]
   * Note: By default, returns top-left coordinates for canvas/SVG type render
   *
   * @param {Array} lngLatZ - [lng, lat] or [lng, lat, Z]
   * @param {Object} opts - options
   * @param {Object} opts.topLeft=true - Whether projected coords are top left
   * @return {Array} - [x, y] or [x, y, z] in top left coords
   */


  _createClass(Viewport, [{
    key: 'project',
    value: function project(lngLatZ) {
      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref2$topLeft = _ref2.topLeft,
          topLeft = _ref2$topLeft === undefined ? true : _ref2$topLeft;

      var _ref3 = this.mercatorEnabled || this.mercator ? this.projectFlat(lngLatZ) : lngLatZ,
          _ref4 = _slicedToArray(_ref3, 2),
          X = _ref4[0],
          Y = _ref4[1];

      var v = [X, Y, lngLatZ[2] || 0, 1];

      // vec4.sub(v, v, [this.centerX, this.centerY, 0, 0]);
      _glMatrix.vec4.transformMat4(v, v, this.pixelProjectionMatrix);
      // Divide by w
      var scale = 1 / v[3];
      _glMatrix.vec4.multiply(v, v, [scale, scale, scale, scale]);
      var x = v[0],
          y = v[1],
          z = v[2];
      // const y2 = topLeft ? this.height - 1 - y : y;

      var y2 = topLeft ? this.height - y : y;
      return lngLatZ.length === 2 ? [x, y2] : [x, y2, z];
    }

    /**
     * Unproject pixel coordinates on screen onto [lon, lat] on map.
     * - [x, y] => [lng, lat]
     * - [x, y, z] => [lng, lat, Z]
     * @param {Array} xyz -
     * @return {Array} - [lng, lat, Z] or [X, Y, Z]
     */

  }, {
    key: 'unproject',
    value: function unproject(xyz) {
      var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref5$topLeft = _ref5.topLeft,
          topLeft = _ref5$topLeft === undefined ? true : _ref5$topLeft;

      var _xyz = _slicedToArray(xyz, 3),
          _xyz$ = _xyz[0],
          x = _xyz$ === undefined ? 0 : _xyz$,
          _xyz$2 = _xyz[1],
          y = _xyz$2 === undefined ? 0 : _xyz$2,
          _xyz$3 = _xyz[2],
          z = _xyz$3 === undefined ? 0 : _xyz$3;
      // const y2 = topLeft ? this.height - 1 - y : y;


      var y2 = topLeft ? this.height - y : y;
      var v = [x, y2, z, 1];
      _glMatrix.vec4.transformMat4(v, v, this.pixelUnprojectionMatrix);
      var scale = 1 / v[3];
      _glMatrix.vec4.multiply(v, v, [scale, scale, scale, scale]);

      var _unprojectFlat = this.unprojectFlat(v),
          _unprojectFlat2 = _slicedToArray(_unprojectFlat, 2),
          x0 = _unprojectFlat2[0],
          y0 = _unprojectFlat2[1];

      var z0 = v[2];

      return xyz.length === 2 ? [x0, y0] : [x0, y0, z0];
    }

    /**
     * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.
     * Performs the nonlinear part of the web mercator projection.
     * Remaining projection is done with 4x4 matrices which also handles
     * perspective.
     *
     * @param {Array} lngLat - [lng, lat] coordinates
     *   Specifies a point on the sphere to project onto the map.
     * @return {Array} [x,y] coordinates.
     */

  }, {
    key: 'projectFlat',
    value: function projectFlat(_ref6) {
      var _ref7 = _slicedToArray(_ref6, 2),
          lng = _ref7[0],
          lat = _ref7[1];

      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.scale;

      scale = scale * WORLD_SCALE;
      var lambda2 = lng * DEGREES_TO_RADIANS;
      var phi2 = lat * DEGREES_TO_RADIANS;
      var x = scale * (lambda2 + PI);
      var y = scale * (PI - Math.log(Math.tan(PI_4 + phi2 * 0.5)));
      return [x, y];
    }

    /**
     * Unproject world point [x,y] on map onto {lat, lon} on sphere
     *
     * @param {object|Vector} xy - object with {x,y} members
     *  representing point on projected map plane
     * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.
     *   Has toArray method if you need a GeoJSON Array.
     *   Per cartographic tradition, lat and lon are specified as degrees.
     */

  }, {
    key: 'unprojectFlat',
    value: function unprojectFlat(_ref8) {
      var _ref9 = _slicedToArray(_ref8, 2),
          x = _ref9[0],
          y = _ref9[1];

      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.scale;

      scale = scale * WORLD_SCALE;
      var lambda2 = x / scale - PI;
      var phi2 = 2 * (Math.atan(Math.exp(PI - y / scale)) - PI_4);
      return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];
    }
  }, {
    key: 'getProjections',
    value: function getProjections() {
      return {
        pixelProjectionMatrix: this.pixelProjectionMatrix,
        pixelUnprojectionMatrix: this.pixelUnprojectionMatrix,
        viewProjectionMatrix: this.viewProjectionMatrix,
        viewMatrix: this.viewMatrix,
        projectionMatrix: this.projectionMatrix
      };
    }
  }, {
    key: 'getDistanceScales',
    value: function getDistanceScales() {
      return {
        pixelsPerMeter: this.pixelsPerMeter,
        metersPerPixel: this.metersPerPixel
      };
    }

    // INTERNAL METHODS

    /* eslint-disable max-statements */

  }, {
    key: '_initialize',
    value: function _initialize() {
      // Scale
      this.scale = Math.pow(2, this.zoom);
      this.worldSize = TILE_SIZE * this.scale;
      this.tileZoom = Math.floor(this.zoom);
      this.zoomFraction = this.zoom - Math.floor(this.zoom);

      // Bearing
      this.bearingRadians = this.bearing / 180 * Math.PI;
      this.bearingRotationMatrix = _glMatrix.mat2.create();
      _glMatrix.mat2.rotate(this.bearingRotationMatrix, this.bearingRotationMatrix, this.bearing);

      // Pitch
      this.originalPitch = this.pitch;
      this.pitch = Math.min(60, this.pitch);
      this.pitchRadians = this.pitch / 180 * Math.PI;

      // Altitude
      this.originalAltitude = this.altitude;
      this.altitude = Math.max(0.75, this.altitude);

      // Center x, y
      this.center = this.projectFlat([this.longitude, this.latitude]);
      this.centerX = this.center[0];
      this.centerY = this.center[1];

      // Find the distance from the center point to the center top
      // in altitude units using law of sines.
      this.halfFov = Math.atan(0.5 / this.altitude);
      this.topHalfSurfaceDistance = Math.sin(this.halfFov) * this.altitude / Math.sin(Math.PI / 2 - this.pitchRadians - this.halfFov);

      // Calculate z value of the farthest fragment that should be rendered.
      this.farZ = Math.cos(Math.PI / 2 - this.pitchRadians) * this.topHalfSurfaceDistance + this.altitude;

      // Calculate matrices and scales needed for projection
      this._calculateDistanceScales();
      this._calculateTransformationMatrices();
    }
    /* eslint-enable max-statements */

    /**
     * Calculate distance scales in meters around current lat/lon, both for
     * degrees and pixels.
     * In mercator projection mode, the distance scales vary significantly
     * with latitude.
     */

  }, {
    key: '_calculateDistanceScales',
    value: function _calculateDistanceScales() {
      // Approximately 111km per degree at equator
      var METERS_PER_DEGREE = 111000;
      var latitude = this.latitude,
          longitude = this.longitude;


      var latCosine = Math.cos(latitude * Math.PI / 180);

      var metersPerDegree = METERS_PER_DEGREE * latCosine;

      // Calculate number of pixels occupied by one degree longitude
      // around current lat/lon
      var pixelsPerDegreeX = _glMatrix.vec2.distance(this.projectFlat([longitude + 0.5, latitude]), this.projectFlat([longitude - 0.5, latitude]));
      // Calculate number of pixels occupied by one degree latitude
      // around current lat/lon
      var pixelsPerDegreeY = _glMatrix.vec2.distance(this.projectFlat([longitude, latitude + 0.5]), this.projectFlat([longitude, latitude - 0.5]));

      var pixelsPerMeterX = pixelsPerDegreeX / metersPerDegree;
      var pixelsPerMeterY = pixelsPerDegreeY / metersPerDegree;
      var pixelsPerMeterZ = (pixelsPerMeterX + pixelsPerMeterY) / 2;

      // const scale = 0.95;
      // const pixelsPerMeter = [
      //   pixelsPerMeterX * scale, pixelsPerMeterY * scale, pixelsPerMeterZ * scale
      // ];
      var altPixelsPerMeter = this.worldSize / (4e7 * latCosine);
      var pixelsPerMeter = [altPixelsPerMeter, altPixelsPerMeter, altPixelsPerMeter];
      var metersPerPixel = [1 / pixelsPerMeterX, 1 / pixelsPerMeterY, 1 / pixelsPerMeterZ];

      // Main results, used for scaling offsets
      this.pixelsPerMeter = pixelsPerMeter;
      // Additional results
      this.metersPerPixel = metersPerPixel;
      // metersPerDegree,
      // degreesPerMeter: 1 / metersPerDegree
    }

    // Note: As usual, matrix operation orders should be read in reverse
    // since vectors will be multiplied in from the right during transformation
    /* eslint-disable max-statements */

  }, {
    key: '_calculateTransformationMatrices',
    value: function _calculateTransformationMatrices() {
      // PROJECTION MATRIX: PROJECTS FROM CAMERA SPACE TO CLIPSPACE
      /* eslint-disable no-inline-comments */
      this.projectionMatrix = _glMatrix.mat4.perspective(this._createMat4(), 2 * Math.atan(this.height / 2 / this.altitude), // fov in radians
      this.width / this.height, // aspect ratio
      0.1, // near plane
      this.farZ * 10.0 // far plane
      );
      /* eslint-enable no-inline-comments */

      // VIEW MATRIX: PROJECTS FROM VIRTUAL PIXELS TO CAMERA SPACE
      var vm = this._createMat4();

      // Move camera to altitude
      _glMatrix.mat4.translate(vm, vm, [0, 0, -this.altitude]);

      // After the rotateX, z values are in pixel units. Convert them to
      // altitude units. 1 altitude unit = the screen height.
      _glMatrix.mat4.scale(vm, vm, [1, -1, 1 / this.height]);

      // Rotate by bearing, and then by pitch (which tilts the view)
      _glMatrix.mat4.rotateX(vm, vm, this.pitchRadians);
      _glMatrix.mat4.rotateZ(vm, vm, -this.bearingRadians);

      this.viewMatrix = this._createMat4();
      _glMatrix.mat4.translate(this.viewMatrix, vm, [-this.centerX, -this.centerY, 0]);

      var vpm = this._createMat4();
      _glMatrix.mat4.multiply(vpm, vpm, this.projectionMatrix);
      _glMatrix.mat4.multiply(vpm, vpm, this.viewMatrix);

      this.viewProjectionMatrix = vpm;

      // PIXEL PROJECTION MATRIX
      var m = this._createMat4();

      // Scale with viewport window's width and height in pixels
      _glMatrix.mat4.scale(m, m, [this.width, this.height, 1]);
      // Convert to (0, 1)
      _glMatrix.mat4.translate(m, m, [0.5, 0.5, 0]);
      _glMatrix.mat4.scale(m, m, [0.5, 0.5, 0]);
      // Project to clip space (-1, 1)
      _glMatrix.mat4.multiply(m, m, this.viewProjectionMatrix);
      this.pixelProjectionMatrix = m;

      var mInverse = this._createMat4();
      _glMatrix.mat4.invert(mInverse, m);
      this.pixelUnprojectionMatrix = mInverse;
    }
    /* eslint-enable max-statements */

    /**
     * Builds matrices that converts preprojected lngLats to screen pixels
     * and vice versa.
     *
     * Note: Currently returns bottom-left coordinates!
     * Note: Starts with the GL projection matrix and adds steps to the
     *       scale and translate that matrix onto the window.
     * Note: WebGL controls clip space to screen projection with gl.viewport
     *       and does not need this step.
     */

  }, {
    key: '_calculatePixelProjectionMatrices',
    value: function _calculatePixelProjectionMatrices() {
      var m = this._createMat4();

      // Scale with viewport window's width and height in pixels
      _glMatrix.mat4.scale(m, m, [this.width, this.height, 1]);
      // Convert to (0, 1)
      _glMatrix.mat4.translate(m, m, [0.5, 0.5, 0]);
      _glMatrix.mat4.scale(m, m, [0.5, 0.5, 0]);
      // Project to clip space (-1, 1)
      _glMatrix.mat4.multiply(m, m, this.viewProjectionMatrix);
      this.pixelProjectionMatrix = m;

      var mInverse = this._createMat4();
      _glMatrix.mat4.invert(mInverse, m);
      this.pixelUnprojectionMatrix = mInverse;
    }

    // Helper, avoids low-precision 32 bit matrices from mat4.create();

  }, {
    key: '_createMat4',
    value: function _createMat4() {
      return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    }
  }]);

  return Viewport;
}(), (_applyDecoratedDescriptor(_class.prototype, 'project', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'project'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'unproject', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'unproject'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'projectFlat', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'projectFlat'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'unprojectFlat', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'unprojectFlat'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'getProjections', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'getProjections'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'getDistanceScales', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'getDistanceScales'), _class.prototype)), _class);
exports.default = Viewport;
//# sourceMappingURL=data:application/json;base64,