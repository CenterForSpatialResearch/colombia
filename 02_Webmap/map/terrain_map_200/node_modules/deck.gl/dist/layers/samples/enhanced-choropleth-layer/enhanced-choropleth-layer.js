'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _lib = require('../../../lib');

var _shaderUtils = require('../../../shader-utils');

var _earcut = require('earcut');

var _earcut2 = _interopRequireDefault(_earcut);

var _lodash = require('lodash.flattendeep');

var _lodash2 = _interopRequireDefault(_lodash);

var _geojsonNormalize = require('geojson-normalize');

var _geojsonNormalize2 = _interopRequireDefault(_geojsonNormalize);

var _luma = require('luma.gl');

var _extrudePolyline = require('extrude-polyline');

var _extrudePolyline2 = _interopRequireDefault(_extrudePolyline);

var _enhancedChoroplethLayerVertex = require('./enhanced-choropleth-layer-vertex');

var _enhancedChoroplethLayerVertex2 = _interopRequireDefault(_enhancedChoroplethLayerVertex);

var _enhancedChoroplethLayerFragment = require('./enhanced-choropleth-layer-fragment');

var _enhancedChoroplethLayerFragment2 = _interopRequireDefault(_enhancedChoroplethLayerFragment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EnhancedChoroplethLayer = function (_Layer) {
  _inherits(EnhancedChoroplethLayer, _Layer);

  /**
   * @classdesc
   * ChoroplethLayer
   *
   * @class
   * @param {object} props
   * @param {bool} props.drawContour - ? drawContour : drawArea
   * @param {function} props.onChoroplethHovered - provide properties of the
   *     selected choropleth, together with the mouse event when mouse hovered
   * @param {function} props.onChoroplethClicked - provide properties of the
   *     selected choropleth, together with the mouse event when mouse clicked
   */
  function EnhancedChoroplethLayer(_ref) {
    var _ref$getColor = _ref.getColor,
        getColor = _ref$getColor === undefined ? null : _ref$getColor,
        _ref$fillColor = _ref.fillColor,
        fillColor = _ref$fillColor === undefined ? [128, 128, 128] : _ref$fillColor,
        _ref$drawContour = _ref.drawContour,
        drawContour = _ref$drawContour === undefined ? true : _ref$drawContour,
        _ref$strokeWidth = _ref.strokeWidth,
        strokeWidth = _ref$strokeWidth === undefined ? 3 : _ref$strokeWidth,
        _ref$strokeColor = _ref.strokeColor,
        strokeColor = _ref$strokeColor === undefined ? [0, 0, 0] : _ref$strokeColor,
        _ref$elevation = _ref.elevation,
        elevation = _ref$elevation === undefined ? 0 : _ref$elevation,
        props = _objectWithoutProperties(_ref, ['getColor', 'fillColor', 'drawContour', 'strokeWidth', 'strokeColor', 'elevation']);

    _classCallCheck(this, EnhancedChoroplethLayer);

    return _possibleConstructorReturn(this, (EnhancedChoroplethLayer.__proto__ || Object.getPrototypeOf(EnhancedChoroplethLayer)).call(this, _extends({
      getColor: getColor,
      fillColor: fillColor,
      drawContour: drawContour,
      strokeWidth: strokeWidth,
      strokeColor: strokeColor,
      elevation: elevation
    }, props)));
  }

  _createClass(EnhancedChoroplethLayer, [{
    key: 'initializeState',
    value: function initializeState() {
      var gl = this.context.gl;
      var attributeManager = this.state.attributeManager;


      attributeManager.add({
        positions: { size: 3, 0: 'x', 1: 'y', 2: 'unused' },
        indices: { size: 1, 0: 'index', isIndexed: true },
        colors: { size: 3, 0: 'red', 1: 'green', 2: 'blue' },
        // Override picking colors to prevent auto allocation
        pickingColors: { size: 3, 0: 'pickRed', 1: 'pickGreen', 2: 'pickBlue' }
      }, {
        // Primtive attributes
        indices: { update: this.calculateIndices },
        positions: { update: this.calculatePositions },
        colors: { update: this.calculateColors },
        // Instanced attributes
        pickingColors: { update: this.calculatePickingColors, noAlloc: true }
      });

      this.setState({
        numInstances: 0,
        model: this.getModel(gl)
      });
    }
  }, {
    key: 'updateState',
    value: function updateState(_ref2) {
      var oldProps = _ref2.oldProps,
          props = _ref2.props,
          changeFlags = _ref2.changeFlags;
      var attributeManager = this.state.attributeManager;

      if (changeFlags.dataChanged || oldProps.strokeWidth !== props.strokeWidth) {
        this.extractChoropleths();
        attributeManager.invalidateAll();
      }
    }
  }, {
    key: 'pick',
    value: function pick(opts) {
      _get(EnhancedChoroplethLayer.prototype.__proto__ || Object.getPrototypeOf(EnhancedChoroplethLayer.prototype), 'pick', this).call(this, opts);
      var info = opts.info;

      var index = this.decodePickingColor(info.color);
      var feature = index >= 0 ? this.props.data.features[index] : null;
      info.feature = feature;
      info.object = feature;
    }
  }, {
    key: 'getModel',
    value: function getModel(gl) {
      return new _luma.Model(_extends({
        gl: gl,
        id: this.props.id
      }, (0, _shaderUtils.assembleShaders)(gl, {
        vs: _enhancedChoroplethLayerVertex2.default,
        fs: _enhancedChoroplethLayerFragment2.default
      }), {
        geometry: new _luma.Geometry({ drawMode: _luma.GL.TRIANGLES }),
        vertexCount: 0,
        isIndexed: true
      }));
    }
  }, {
    key: 'calculatePositions',
    value: function calculatePositions(attribute) {
      var elevation = this.props.elevation;

      var positions = this.props.drawContour ? (0, _lodash2.default)(this.state.meshes.map(function (mesh) {
        return mesh.positions.map(function (pos) {
          return [].concat(_toConsumableArray(pos), [elevation]);
        });
      })) : (0, _lodash2.default)(this.state.groupedVertices);

      attribute.value = new Float32Array(positions);
    }
  }, {
    key: 'calculateIndices',
    value: function calculateIndices(attribute) {
      // adjust index offset for multiple choropleths
      var offsets = this.props.drawContour ? this.state.meshes.reduce(function (acc, mesh) {
        return [].concat(_toConsumableArray(acc), [acc[acc.length - 1] + mesh.positions.length]);
      }, [0]) : this.state.groupedVertices.reduce(function (acc, vertices) {
        return [].concat(_toConsumableArray(acc), [acc[acc.length - 1] + vertices.length]);
      }, [0]);

      var indices = this.props.drawContour ? this.state.meshes.map(function (mesh, choroplethIndex) {
        return mesh.cells.map(function (cell) {
          return cell.map(function (index) {
            return index + offsets[choroplethIndex];
          });
        });
      }) : this.state.groupedVertices.map(function (vertices, choroplethIndex) {
        return (0, _earcut2.default)((0, _lodash2.default)(vertices), null, 3).map(function (index) {
          return index + offsets[choroplethIndex];
        });
      });

      attribute.value = new Uint16Array((0, _lodash2.default)(indices));
      attribute.target = _luma.GL.ELEMENT_ARRAY_BUFFER;
      // attribute.isIndexed = true;

      this.state.model.setVertexCount(attribute.value.length / attribute.size);
    }
  }, {
    key: 'calculateColors',
    value: function calculateColors(attribute) {
      var _this2 = this;

      var _props = this.props,
          strokeColor = _props.strokeColor,
          fillColor = _props.fillColor,
          getColor = _props.getColor;

      var vColor = void 0;
      var colors = this.props.drawContour ? this.state.meshes.map(function (mesh, i) {
        vColor = getColor ? getColor(_this2.state.choropleths[i]) : strokeColor;
        return mesh.positions.map(function (p) {
          return vColor;
        });
      }) : this.state.groupedVertices.map(function (vertices, i) {
        vColor = getColor ? getColor(_this2.state.choropleths[i]) : fillColor;
        return vertices.map(function (vertex) {
          return vColor;
        });
      });

      attribute.value = new Float32Array((0, _lodash2.default)(colors));
    }

    // Override the default picking colors calculation

  }, {
    key: 'calculatePickingColors',
    value: function calculatePickingColors(attribute) {
      var colors = this.props.drawContour ? this.state.meshes.map(function (mesh, i) {
        return mesh.positions.map(function (pos) {
          return [0, 0, 0];
        });
      }) : this.state.groupedVertices.map(function (vertices, choroplethIndex) {
        return vertices.map(function (vertex) {
          return [(choroplethIndex + 1) % 256, Math.floor((choroplethIndex + 1) / 256) % 256, Math.floor((choroplethIndex + 1) / 256 / 256) % 256];
        });
      });

      attribute.value = new Float32Array((0, _lodash2.default)(colors));
    }
  }, {
    key: 'extractChoropleths',
    value: function extractChoropleths() {
      var _this3 = this;

      var data = this.props.data;

      var normalizedGeojson = (0, _geojsonNormalize2.default)(data);

      this.state.choropleths = normalizedGeojson.features.map(function (choropleth) {
        var coordinates = choropleth.geometry.coordinates[0] || [];
        // flatten nested polygons
        if (coordinates.length === 1 && coordinates[0].length > 2) {
          coordinates = coordinates[0];
        }
        return {
          properties: choropleth.properties,
          coordinates: coordinates
        };
      });

      if (this.props.drawContour) {
        (function () {
          var stroke = (0, _extrudePolyline2.default)({
            thickness: 0.0001 * _this3.props.strokeWidth,
            cap: 'butt',
            join: 'bevel',
            miterLimit: 0.005
          });

          _this3.state.meshes = _this3.state.choropleths.map(function (choropleth) {
            return stroke.build(choropleth.coordinates.map(function (coordinate) {
              return [coordinate[0], coordinate[1]];
            }));
          });
        })();
      } else {
        this.state.groupedVertices = this.state.choropleths.map(function (choropleth) {
          return choropleth.coordinates.map(function (coordinate) {
            return [coordinate[0], coordinate[1], 100];
          });
        });
      }
    }
  }]);

  return EnhancedChoroplethLayer;
}(_lib.Layer);

EnhancedChoroplethLayer.layerName = 'EnhancedChoroplethLayer';
exports.default = EnhancedChoroplethLayer;
//# sourceMappingURL=data:application/json;base64,