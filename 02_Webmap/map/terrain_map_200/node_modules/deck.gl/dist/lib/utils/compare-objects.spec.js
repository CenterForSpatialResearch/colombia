'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _tapeCatch = require('tape-catch');

var _tapeCatch2 = _interopRequireDefault(_tapeCatch);

var _compareObjects = require('./compare-objects');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SAME = 'equal';
var NOT_SAME = 'not equal';

var NULL_OBJECT = {};

var SHALLOW_OBJECT = {
  a: 1,
  b: 2
};

var DEEP_OBJECT = {
  a: [1],
  b: [2]
};

var TEST_CASES = [{
  title: 'empty objects (same)',
  object1: NULL_OBJECT,
  object2: NULL_OBJECT,
  result: SAME
}, {
  title: 'empty objects (different)',
  object1: {},
  object2: {},
  result: SAME
}, {
  title: 'shallow objects (same)',
  object1: SHALLOW_OBJECT,
  object2: SHALLOW_OBJECT,
  result: SAME
}, {
  title: 'shallow objects (different)',
  object1: SHALLOW_OBJECT,
  object2: _extends({}, SHALLOW_OBJECT),
  result: SAME
}, {
  title: 'deep objects (same)',
  object1: DEEP_OBJECT,
  object2: DEEP_OBJECT,
  result: SAME
}, {
  title: 'deep objects (different, but same nested objects)',
  object1: DEEP_OBJECT,
  object2: _extends({}, DEEP_OBJECT),
  result: SAME
}, {
  title: 'deep objects (different nested objects)',
  object1: DEEP_OBJECT,
  object2: { a: [1], b: [2] },
  result: NOT_SAME
}, {
  title: 'different length objects (a < b)',
  object1: { a: 1, b: 2 },
  object2: { a: 1, b: 2, c: 3 },
  result: NOT_SAME
}, {
  title: 'different length objects (b > a)',
  object1: { a: 1, b: 2, c: 3 },
  object2: { a: 1, b: 2 },
  result: NOT_SAME
}, {
  title: 'different objects',
  object1: { a: 1, b: 3 },
  object2: { a: 1, b: 2 },
  result: NOT_SAME
}, {
  title: 'different arrays',
  object1: [1, 2, 3],
  object2: [1, 2, 4],
  result: NOT_SAME
}, {
  title: 'equal arrays',
  object1: [1, 2, 3],
  object2: [1, 2, 3],
  result: SAME
}];

(0, _tapeCatch2.default)('compareProps#import', function (t) {
  t.ok(_compareObjects.compareProps, 'compareProps imported OK');
  t.end();
});

(0, _tapeCatch2.default)('compareProps#tests', function (t) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = TEST_CASES[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var tc = _step.value;

      var result = (0, _compareObjects.compareProps)({ oldProps: tc.object1, newProps: tc.object2 });
      t.ok(result === null || typeof result === 'string', 'compareProps ' + tc.title + ' returned expected type');
      var equal = 'illegal value';
      if (typeof result === 'string') {
        equal = NOT_SAME;
      } else if (result === null) {
        equal = SAME;
      }
      t.equal(equal, tc.result, 'compareProps ' + tc.title + ' returned expected result');
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvdXRpbHMvY29tcGFyZS1vYmplY3RzLnNwZWMuanMiXSwibmFtZXMiOlsiU0FNRSIsIk5PVF9TQU1FIiwiTlVMTF9PQkpFQ1QiLCJTSEFMTE9XX09CSkVDVCIsImEiLCJiIiwiREVFUF9PQkpFQ1QiLCJURVNUX0NBU0VTIiwidGl0bGUiLCJvYmplY3QxIiwib2JqZWN0MiIsInJlc3VsdCIsImMiLCJ0Iiwib2siLCJlbmQiLCJ0YyIsIm9sZFByb3BzIiwibmV3UHJvcHMiLCJlcXVhbCJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFFQSxJQUFNQSxPQUFPLE9BQWI7QUFDQSxJQUFNQyxXQUFXLFdBQWpCOztBQUVBLElBQU1DLGNBQWMsRUFBcEI7O0FBRUEsSUFBTUMsaUJBQWlCO0FBQ3JCQyxLQUFHLENBRGtCO0FBRXJCQyxLQUFHO0FBRmtCLENBQXZCOztBQUtBLElBQU1DLGNBQWM7QUFDbEJGLEtBQUcsQ0FBQyxDQUFELENBRGU7QUFFbEJDLEtBQUcsQ0FBQyxDQUFEO0FBRmUsQ0FBcEI7O0FBS0EsSUFBTUUsYUFBYSxDQUNqQjtBQUNFQyxTQUFPLHNCQURUO0FBRUVDLFdBQVNQLFdBRlg7QUFHRVEsV0FBU1IsV0FIWDtBQUlFUyxVQUFRWDtBQUpWLENBRGlCLEVBTWQ7QUFDRFEsU0FBTywyQkFETjtBQUVEQyxXQUFTLEVBRlI7QUFHREMsV0FBUyxFQUhSO0FBSURDLFVBQVFYO0FBSlAsQ0FOYyxFQVdkO0FBQ0RRLFNBQU8sd0JBRE47QUFFREMsV0FBU04sY0FGUjtBQUdETyxXQUFTUCxjQUhSO0FBSURRLFVBQVFYO0FBSlAsQ0FYYyxFQWdCZDtBQUNEUSxTQUFPLDZCQUROO0FBRURDLFdBQVNOLGNBRlI7QUFHRE8sd0JBQWFQLGNBQWIsQ0FIQztBQUlEUSxVQUFRWDtBQUpQLENBaEJjLEVBcUJkO0FBQ0RRLFNBQU8scUJBRE47QUFFREMsV0FBU0gsV0FGUjtBQUdESSxXQUFTSixXQUhSO0FBSURLLFVBQVFYO0FBSlAsQ0FyQmMsRUEwQmQ7QUFDRFEsU0FBTyxtREFETjtBQUVEQyxXQUFTSCxXQUZSO0FBR0RJLHdCQUFhSixXQUFiLENBSEM7QUFJREssVUFBUVg7QUFKUCxDQTFCYyxFQStCZDtBQUNEUSxTQUFPLHlDQUROO0FBRURDLFdBQVNILFdBRlI7QUFHREksV0FBUyxFQUFDTixHQUFHLENBQUMsQ0FBRCxDQUFKLEVBQVNDLEdBQUcsQ0FBQyxDQUFELENBQVosRUFIUjtBQUlETSxVQUFRVjtBQUpQLENBL0JjLEVBb0NkO0FBQ0RPLFNBQU8sa0NBRE47QUFFREMsV0FBUyxFQUFDTCxHQUFHLENBQUosRUFBT0MsR0FBRyxDQUFWLEVBRlI7QUFHREssV0FBUyxFQUFDTixHQUFHLENBQUosRUFBT0MsR0FBRyxDQUFWLEVBQWFPLEdBQUcsQ0FBaEIsRUFIUjtBQUlERCxVQUFRVjtBQUpQLENBcENjLEVBeUNkO0FBQ0RPLFNBQU8sa0NBRE47QUFFREMsV0FBUyxFQUFDTCxHQUFHLENBQUosRUFBT0MsR0FBRyxDQUFWLEVBQWFPLEdBQUcsQ0FBaEIsRUFGUjtBQUdERixXQUFTLEVBQUNOLEdBQUcsQ0FBSixFQUFPQyxHQUFHLENBQVYsRUFIUjtBQUlETSxVQUFRVjtBQUpQLENBekNjLEVBOENkO0FBQ0RPLFNBQU8sbUJBRE47QUFFREMsV0FBUyxFQUFDTCxHQUFHLENBQUosRUFBT0MsR0FBRyxDQUFWLEVBRlI7QUFHREssV0FBUyxFQUFDTixHQUFHLENBQUosRUFBT0MsR0FBRyxDQUFWLEVBSFI7QUFJRE0sVUFBUVY7QUFKUCxDQTlDYyxFQW1EZDtBQUNETyxTQUFPLGtCQUROO0FBRURDLFdBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsQ0FGUjtBQUdEQyxXQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLENBSFI7QUFJREMsVUFBUVY7QUFKUCxDQW5EYyxFQXdEZDtBQUNETyxTQUFPLGNBRE47QUFFREMsV0FBUyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxDQUZSO0FBR0RDLFdBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsQ0FIUjtBQUlEQyxVQUFRWDtBQUpQLENBeERjLENBQW5COztBQWdFQSx5QkFBSyxxQkFBTCxFQUE0QixhQUFLO0FBQy9CYSxJQUFFQyxFQUFGLCtCQUNFLDBCQURGO0FBRUFELElBQUVFLEdBQUY7QUFDRCxDQUpEOztBQU1BLHlCQUFLLG9CQUFMLEVBQTJCLGFBQUs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFDOUIseUJBQWlCUixVQUFqQiw4SEFBNkI7QUFBQSxVQUFsQlMsRUFBa0I7O0FBQzNCLFVBQU1MLFNBQVMsa0NBQWEsRUFBQ00sVUFBVUQsR0FBR1AsT0FBZCxFQUF1QlMsVUFBVUYsR0FBR04sT0FBcEMsRUFBYixDQUFmO0FBQ0FHLFFBQUVDLEVBQUYsQ0FBS0gsV0FBVyxJQUFYLElBQW1CLE9BQU9BLE1BQVAsS0FBa0IsUUFBMUMsb0JBQ2tCSyxHQUFHUixLQURyQjtBQUVBLFVBQUlXLFFBQVEsZUFBWjtBQUNBLFVBQUksT0FBT1IsTUFBUCxLQUFrQixRQUF0QixFQUFnQztBQUM5QlEsZ0JBQVFsQixRQUFSO0FBQ0QsT0FGRCxNQUVPLElBQUlVLFdBQVcsSUFBZixFQUFxQjtBQUMxQlEsZ0JBQVFuQixJQUFSO0FBQ0Q7QUFDRGEsUUFBRU0sS0FBRixDQUFRQSxLQUFSLEVBQWVILEdBQUdMLE1BQWxCLG9CQUNrQkssR0FBR1IsS0FEckI7QUFFRDtBQWI2QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQWM5QkssSUFBRUUsR0FBRjtBQUNELENBZkQiLCJmaWxlIjoiY29tcGFyZS1vYmplY3RzLnNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGVzdCBmcm9tICd0YXBlLWNhdGNoJztcbmltcG9ydCB7Y29tcGFyZVByb3BzfSBmcm9tICcuL2NvbXBhcmUtb2JqZWN0cyc7XG5cbmNvbnN0IFNBTUUgPSAnZXF1YWwnO1xuY29uc3QgTk9UX1NBTUUgPSAnbm90IGVxdWFsJztcblxuY29uc3QgTlVMTF9PQkpFQ1QgPSB7fTtcblxuY29uc3QgU0hBTExPV19PQkpFQ1QgPSB7XG4gIGE6IDEsXG4gIGI6IDJcbn07XG5cbmNvbnN0IERFRVBfT0JKRUNUID0ge1xuICBhOiBbMV0sXG4gIGI6IFsyXVxufTtcblxuY29uc3QgVEVTVF9DQVNFUyA9IFtcbiAge1xuICAgIHRpdGxlOiAnZW1wdHkgb2JqZWN0cyAoc2FtZSknLFxuICAgIG9iamVjdDE6IE5VTExfT0JKRUNULFxuICAgIG9iamVjdDI6IE5VTExfT0JKRUNULFxuICAgIHJlc3VsdDogU0FNRVxuICB9LCB7XG4gICAgdGl0bGU6ICdlbXB0eSBvYmplY3RzIChkaWZmZXJlbnQpJyxcbiAgICBvYmplY3QxOiB7fSxcbiAgICBvYmplY3QyOiB7fSxcbiAgICByZXN1bHQ6IFNBTUVcbiAgfSwge1xuICAgIHRpdGxlOiAnc2hhbGxvdyBvYmplY3RzIChzYW1lKScsXG4gICAgb2JqZWN0MTogU0hBTExPV19PQkpFQ1QsXG4gICAgb2JqZWN0MjogU0hBTExPV19PQkpFQ1QsXG4gICAgcmVzdWx0OiBTQU1FXG4gIH0sIHtcbiAgICB0aXRsZTogJ3NoYWxsb3cgb2JqZWN0cyAoZGlmZmVyZW50KScsXG4gICAgb2JqZWN0MTogU0hBTExPV19PQkpFQ1QsXG4gICAgb2JqZWN0Mjogey4uLlNIQUxMT1dfT0JKRUNUfSxcbiAgICByZXN1bHQ6IFNBTUVcbiAgfSwge1xuICAgIHRpdGxlOiAnZGVlcCBvYmplY3RzIChzYW1lKScsXG4gICAgb2JqZWN0MTogREVFUF9PQkpFQ1QsXG4gICAgb2JqZWN0MjogREVFUF9PQkpFQ1QsXG4gICAgcmVzdWx0OiBTQU1FXG4gIH0sIHtcbiAgICB0aXRsZTogJ2RlZXAgb2JqZWN0cyAoZGlmZmVyZW50LCBidXQgc2FtZSBuZXN0ZWQgb2JqZWN0cyknLFxuICAgIG9iamVjdDE6IERFRVBfT0JKRUNULFxuICAgIG9iamVjdDI6IHsuLi5ERUVQX09CSkVDVH0sXG4gICAgcmVzdWx0OiBTQU1FXG4gIH0sIHtcbiAgICB0aXRsZTogJ2RlZXAgb2JqZWN0cyAoZGlmZmVyZW50IG5lc3RlZCBvYmplY3RzKScsXG4gICAgb2JqZWN0MTogREVFUF9PQkpFQ1QsXG4gICAgb2JqZWN0Mjoge2E6IFsxXSwgYjogWzJdfSxcbiAgICByZXN1bHQ6IE5PVF9TQU1FXG4gIH0sIHtcbiAgICB0aXRsZTogJ2RpZmZlcmVudCBsZW5ndGggb2JqZWN0cyAoYSA8IGIpJyxcbiAgICBvYmplY3QxOiB7YTogMSwgYjogMn0sXG4gICAgb2JqZWN0Mjoge2E6IDEsIGI6IDIsIGM6IDN9LFxuICAgIHJlc3VsdDogTk9UX1NBTUVcbiAgfSwge1xuICAgIHRpdGxlOiAnZGlmZmVyZW50IGxlbmd0aCBvYmplY3RzIChiID4gYSknLFxuICAgIG9iamVjdDE6IHthOiAxLCBiOiAyLCBjOiAzfSxcbiAgICBvYmplY3QyOiB7YTogMSwgYjogMn0sXG4gICAgcmVzdWx0OiBOT1RfU0FNRVxuICB9LCB7XG4gICAgdGl0bGU6ICdkaWZmZXJlbnQgb2JqZWN0cycsXG4gICAgb2JqZWN0MToge2E6IDEsIGI6IDN9LFxuICAgIG9iamVjdDI6IHthOiAxLCBiOiAyfSxcbiAgICByZXN1bHQ6IE5PVF9TQU1FXG4gIH0sIHtcbiAgICB0aXRsZTogJ2RpZmZlcmVudCBhcnJheXMnLFxuICAgIG9iamVjdDE6IFsxLCAyLCAzXSxcbiAgICBvYmplY3QyOiBbMSwgMiwgNF0sXG4gICAgcmVzdWx0OiBOT1RfU0FNRVxuICB9LCB7XG4gICAgdGl0bGU6ICdlcXVhbCBhcnJheXMnLFxuICAgIG9iamVjdDE6IFsxLCAyLCAzXSxcbiAgICBvYmplY3QyOiBbMSwgMiwgM10sXG4gICAgcmVzdWx0OiBTQU1FXG4gIH1cbl07XG5cbnRlc3QoJ2NvbXBhcmVQcm9wcyNpbXBvcnQnLCB0ID0+IHtcbiAgdC5vayhjb21wYXJlUHJvcHMsXG4gICAgJ2NvbXBhcmVQcm9wcyBpbXBvcnRlZCBPSycpO1xuICB0LmVuZCgpO1xufSk7XG5cbnRlc3QoJ2NvbXBhcmVQcm9wcyN0ZXN0cycsIHQgPT4ge1xuICBmb3IgKGNvbnN0IHRjIG9mIFRFU1RfQ0FTRVMpIHtcbiAgICBjb25zdCByZXN1bHQgPSBjb21wYXJlUHJvcHMoe29sZFByb3BzOiB0Yy5vYmplY3QxLCBuZXdQcm9wczogdGMub2JqZWN0Mn0pO1xuICAgIHQub2socmVzdWx0ID09PSBudWxsIHx8IHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnLFxuICAgICAgYGNvbXBhcmVQcm9wcyAke3RjLnRpdGxlfSByZXR1cm5lZCBleHBlY3RlZCB0eXBlYCk7XG4gICAgbGV0IGVxdWFsID0gJ2lsbGVnYWwgdmFsdWUnO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgZXF1YWwgPSBOT1RfU0FNRTtcbiAgICB9IGVsc2UgaWYgKHJlc3VsdCA9PT0gbnVsbCkge1xuICAgICAgZXF1YWwgPSBTQU1FO1xuICAgIH1cbiAgICB0LmVxdWFsKGVxdWFsLCB0Yy5yZXN1bHQsXG4gICAgICBgY29tcGFyZVByb3BzICR7dGMudGl0bGV9IHJldHVybmVkIGV4cGVjdGVkIHJlc3VsdGApO1xuICB9XG4gIHQuZW5kKCk7XG59KTtcbiJdfQ==