'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _tapeCatch = require('tape-catch');

var _tapeCatch2 = _interopRequireDefault(_tapeCatch);

var _glMatrix = require('gl-matrix');

var _viewport = require('../../viewport');

var _viewport2 = _interopRequireDefault(_viewport);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable */
var VIEWPORT_TEST_DATA = [{
  mapState: {
    width: 793,
    height: 775,
    latitude: 37.751537058389985,
    longitude: -122.42694203247012,
    zoom: 11.5,
    bearing: -44.48928121059271,
    pitch: 43.670797287818566
    // altitude: undefined
  }
}];

(0, _tapeCatch2.default)('Viewport#constructor', function (t) {
  t.ok(new _viewport2.default() instanceof _viewport2.default, 'Created new Viewport with default args');
  t.end();
});

(0, _tapeCatch2.default)('Viewport#constructor - 0 width/height', function (t) {
  var viewport = new _viewport2.default(_extends({}, VIEWPORT_TEST_DATA.mapState, {
    width: 0,
    height: 0
  }));
  t.ok(viewport instanceof _viewport2.default, 'Viewport constructed successfully with 0 width and height');
  t.end();
});

(0, _tapeCatch2.default)('Viewport.projectFlat', function (t) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = VIEWPORT_TEST_DATA[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var tc = _step.value;
      var mapState = tc.mapState;

      var viewport = new _viewport2.default(mapState);
      var lnglatIn = [tc.mapState.longitude + 5, tc.mapState.latitude + 5];
      var xy = viewport.projectFlat(lnglatIn);
      var lnglat = viewport.unprojectFlat(xy);
      t.comment('Comparing [' + lnglatIn + '] to [' + lnglat + ']');
      t.ok(_glMatrix.vec2.equals(lnglatIn, lnglat));
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  t.end();
});

// test('Viewport.project#3D', t => {
//   for (const tc of VIEWPORT_TEST_DATA) {
//     const {mapState} = tc;
//     const viewport = new Viewport(mapState);
//     const lnglatIn = [tc.mapState.longitude + 5, tc.mapState.latitude + 5];
//     const xy = viewport.project(lnglatIn);
//     const lnglat = viewport.unproject(xy);
//     t.comment(`Comparing [${lnglatIn}] to [${lnglat}]`);
//     t.ok(vec2.equals(lnglatIn, lnglat));
//   }
//   t.end();
// });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXN0L3ZpZXdwb3J0L3ZpZXdwb3J0LnNwZWMuanMiXSwibmFtZXMiOlsiVklFV1BPUlRfVEVTVF9EQVRBIiwibWFwU3RhdGUiLCJ3aWR0aCIsImhlaWdodCIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwiem9vbSIsImJlYXJpbmciLCJwaXRjaCIsInQiLCJvayIsImVuZCIsInZpZXdwb3J0IiwidGMiLCJsbmdsYXRJbiIsInh5IiwicHJvamVjdEZsYXQiLCJsbmdsYXQiLCJ1bnByb2plY3RGbGF0IiwiY29tbWVudCIsImVxdWFscyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7O0FBQ0E7O0FBQ0E7Ozs7OztBQUVBO0FBQ0EsSUFBTUEscUJBQXFCLENBQ3pCO0FBQ0VDLFlBQVU7QUFDUkMsV0FBTyxHQURDO0FBRVJDLFlBQVEsR0FGQTtBQUdSQyxjQUFVLGtCQUhGO0FBSVJDLGVBQVcsQ0FBQyxrQkFKSjtBQUtSQyxVQUFNLElBTEU7QUFNUkMsYUFBUyxDQUFDLGlCQU5GO0FBT1JDLFdBQU87QUFDUDtBQVJRO0FBRFosQ0FEeUIsQ0FBM0I7O0FBZUEseUJBQUssc0JBQUwsRUFBNkIsYUFBSztBQUNoQ0MsSUFBRUMsRUFBRixDQUFLLHNEQUFMLEVBQ0Usd0NBREY7QUFFQUQsSUFBRUUsR0FBRjtBQUNELENBSkQ7O0FBTUEseUJBQUssdUNBQUwsRUFBOEMsYUFBSztBQUNqRCxNQUFNQyxXQUFXLG9DQUNaWixtQkFBbUJDLFFBRFA7QUFFZkMsV0FBTyxDQUZRO0FBR2ZDLFlBQVE7QUFITyxLQUFqQjtBQUtBTSxJQUFFQyxFQUFGLENBQUtFLHNDQUFMLEVBQ0UsMkRBREY7QUFFQUgsSUFBRUUsR0FBRjtBQUNELENBVEQ7O0FBV0EseUJBQUssc0JBQUwsRUFBNkIsYUFBSztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUNoQyx5QkFBaUJYLGtCQUFqQiw4SEFBcUM7QUFBQSxVQUExQmEsRUFBMEI7QUFBQSxVQUM1QlosUUFENEIsR0FDaEJZLEVBRGdCLENBQzVCWixRQUQ0Qjs7QUFFbkMsVUFBTVcsV0FBVyx1QkFBYVgsUUFBYixDQUFqQjtBQUNBLFVBQU1hLFdBQVcsQ0FBQ0QsR0FBR1osUUFBSCxDQUFZSSxTQUFaLEdBQXdCLENBQXpCLEVBQTRCUSxHQUFHWixRQUFILENBQVlHLFFBQVosR0FBdUIsQ0FBbkQsQ0FBakI7QUFDQSxVQUFNVyxLQUFLSCxTQUFTSSxXQUFULENBQXFCRixRQUFyQixDQUFYO0FBQ0EsVUFBTUcsU0FBU0wsU0FBU00sYUFBVCxDQUF1QkgsRUFBdkIsQ0FBZjtBQUNBTixRQUFFVSxPQUFGLGlCQUF3QkwsUUFBeEIsY0FBeUNHLE1BQXpDO0FBQ0FSLFFBQUVDLEVBQUYsQ0FBSyxlQUFLVSxNQUFMLENBQVlOLFFBQVosRUFBc0JHLE1BQXRCLENBQUw7QUFDRDtBQVQrQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQVVoQ1IsSUFBRUUsR0FBRjtBQUNELENBWEQ7O0FBY0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6InZpZXdwb3J0LnNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGVzdCBmcm9tICd0YXBlLWNhdGNoJztcbmltcG9ydCB7dmVjMn0gZnJvbSAnZ2wtbWF0cml4JztcbmltcG9ydCBWaWV3cG9ydCBmcm9tICcuLi8uLi92aWV3cG9ydCc7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5jb25zdCBWSUVXUE9SVF9URVNUX0RBVEEgPSBbXG4gIHtcbiAgICBtYXBTdGF0ZToge1xuICAgICAgd2lkdGg6IDc5MyxcbiAgICAgIGhlaWdodDogNzc1LFxuICAgICAgbGF0aXR1ZGU6IDM3Ljc1MTUzNzA1ODM4OTk4NSxcbiAgICAgIGxvbmdpdHVkZTogLTEyMi40MjY5NDIwMzI0NzAxMixcbiAgICAgIHpvb206IDExLjUsXG4gICAgICBiZWFyaW5nOiAtNDQuNDg5MjgxMjEwNTkyNzEsXG4gICAgICBwaXRjaDogNDMuNjcwNzk3Mjg3ODE4NTY2XG4gICAgICAvLyBhbHRpdHVkZTogdW5kZWZpbmVkXG4gICAgfVxuICB9XG5dO1xuXG50ZXN0KCdWaWV3cG9ydCNjb25zdHJ1Y3RvcicsIHQgPT4ge1xuICB0Lm9rKG5ldyBWaWV3cG9ydCgpIGluc3RhbmNlb2YgVmlld3BvcnQsXG4gICAgJ0NyZWF0ZWQgbmV3IFZpZXdwb3J0IHdpdGggZGVmYXVsdCBhcmdzJyk7XG4gIHQuZW5kKCk7XG59KTtcblxudGVzdCgnVmlld3BvcnQjY29uc3RydWN0b3IgLSAwIHdpZHRoL2hlaWdodCcsIHQgPT4ge1xuICBjb25zdCB2aWV3cG9ydCA9IG5ldyBWaWV3cG9ydCh7XG4gICAgLi4uVklFV1BPUlRfVEVTVF9EQVRBLm1hcFN0YXRlLFxuICAgIHdpZHRoOiAwLFxuICAgIGhlaWdodDogMFxuICB9KTtcbiAgdC5vayh2aWV3cG9ydCBpbnN0YW5jZW9mIFZpZXdwb3J0LFxuICAgICdWaWV3cG9ydCBjb25zdHJ1Y3RlZCBzdWNjZXNzZnVsbHkgd2l0aCAwIHdpZHRoIGFuZCBoZWlnaHQnKTtcbiAgdC5lbmQoKTtcbn0pO1xuXG50ZXN0KCdWaWV3cG9ydC5wcm9qZWN0RmxhdCcsIHQgPT4ge1xuICBmb3IgKGNvbnN0IHRjIG9mIFZJRVdQT1JUX1RFU1RfREFUQSkge1xuICAgIGNvbnN0IHttYXBTdGF0ZX0gPSB0YztcbiAgICBjb25zdCB2aWV3cG9ydCA9IG5ldyBWaWV3cG9ydChtYXBTdGF0ZSk7XG4gICAgY29uc3QgbG5nbGF0SW4gPSBbdGMubWFwU3RhdGUubG9uZ2l0dWRlICsgNSwgdGMubWFwU3RhdGUubGF0aXR1ZGUgKyA1XTtcbiAgICBjb25zdCB4eSA9IHZpZXdwb3J0LnByb2plY3RGbGF0KGxuZ2xhdEluKTtcbiAgICBjb25zdCBsbmdsYXQgPSB2aWV3cG9ydC51bnByb2plY3RGbGF0KHh5KTtcbiAgICB0LmNvbW1lbnQoYENvbXBhcmluZyBbJHtsbmdsYXRJbn1dIHRvIFske2xuZ2xhdH1dYCk7XG4gICAgdC5vayh2ZWMyLmVxdWFscyhsbmdsYXRJbiwgbG5nbGF0KSk7XG4gIH1cbiAgdC5lbmQoKTtcbn0pO1xuXG5cbi8vIHRlc3QoJ1ZpZXdwb3J0LnByb2plY3QjM0QnLCB0ID0+IHtcbi8vICAgZm9yIChjb25zdCB0YyBvZiBWSUVXUE9SVF9URVNUX0RBVEEpIHtcbi8vICAgICBjb25zdCB7bWFwU3RhdGV9ID0gdGM7XG4vLyAgICAgY29uc3Qgdmlld3BvcnQgPSBuZXcgVmlld3BvcnQobWFwU3RhdGUpO1xuLy8gICAgIGNvbnN0IGxuZ2xhdEluID0gW3RjLm1hcFN0YXRlLmxvbmdpdHVkZSArIDUsIHRjLm1hcFN0YXRlLmxhdGl0dWRlICsgNV07XG4vLyAgICAgY29uc3QgeHkgPSB2aWV3cG9ydC5wcm9qZWN0KGxuZ2xhdEluKTtcbi8vICAgICBjb25zdCBsbmdsYXQgPSB2aWV3cG9ydC51bnByb2plY3QoeHkpO1xuLy8gICAgIHQuY29tbWVudChgQ29tcGFyaW5nIFske2xuZ2xhdElufV0gdG8gWyR7bG5nbGF0fV1gKTtcbi8vICAgICB0Lm9rKHZlYzIuZXF1YWxzKGxuZ2xhdEluLCBsbmdsYXQpKTtcbi8vICAgfVxuLy8gICB0LmVuZCgpO1xuLy8gfSk7XG4iXX0=