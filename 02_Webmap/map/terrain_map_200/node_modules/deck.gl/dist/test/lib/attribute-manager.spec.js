'use strict';

var _attributeManager = require('./attribute-manager');

var _tapeCatch = require('tape-catch');

var _tapeCatch2 = _interopRequireDefault(_tapeCatch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable dot-notation, max-statements, no-unused-vars */
function update(attribute, _ref) {
  var data = _ref.data;
  var value = attribute.value,
      size = attribute.size;

  var i = 0;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var object = _step.value;

      for (var n = 0; n < size; ++n) {
        value[i + n] = i + n;
      }
      i += size;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

var fixture = {
  positions: new Float32Array([0, 1, 0, -1, -1, 0, 1, -1, 0])
};

(0, _tapeCatch2.default)('Core#AttributeManager constructor', function (t) {
  var attributeManager = new _attributeManager.AttributeManager();

  t.ok(attributeManager, 'AttributeManager construction successful');
  t.end();
});

(0, _tapeCatch2.default)('Core#AttributeManager.add', function (t) {
  var attributeManager = new _attributeManager.AttributeManager();

  t.throws(function () {
    return attributeManager.add({ positions: { update: update } });
  }, 'AttributeManager.add - throws on missing attribute size');

  t.throws(function () {
    return attributeManager.add({ positions: { size: 2 } });
  }, 'AttributeManager.add - throws on missing attribute update');

  attributeManager.add({ positions: { size: 2, update: update } });
  t.ok(attributeManager.getAttributes()['positions'], 'AttributeManager.add - add attribute successful');
  t.end();
});

(0, _tapeCatch2.default)('Core#AttributeManager.update', function (t) {
  var attributeManager = new _attributeManager.AttributeManager();
  attributeManager.add({ positions: { size: 2, update: update } });

  var attribute = void 0;

  // First update, should autoalloc and update the value array
  attributeManager.update({
    numInstances: 1,
    data: [{}]
  });

  attribute = attributeManager.getAttributes()['positions'];
  t.ok(ArrayBuffer.isView(attribute.value), 'attribute has typed array');
  t.equals(attribute.value[1], 1, 'attribute value is correct');

  // Second update without invalidation, should not update
  attribute.value[1] = 2;

  attributeManager.update({
    numInstances: 1,
    data: [{}]
  });

  attribute = attributeManager.getAttributes()['positions'];
  t.ok(ArrayBuffer.isView(attribute.value), 'attribute has typed array');
  t.equals(attribute.value[1], 2, 'Second update, attribute value was not changed');

  // Third update, with invalidation, should update
  attributeManager.invalidateAll();
  attributeManager.update({
    numInstances: 1,
    data: [{}]
  });

  attribute = attributeManager.getAttributes()['positions'];
  t.ok(ArrayBuffer.isView(attribute.value), 'attribute has typed array');
  t.equals(attribute.value[1], 1, 'Third update, attribute value was updated');

  t.end();
});

(0, _tapeCatch2.default)('Core#AttributeManager.update - 0 numInstances', function (t) {
  var attributeManager = new _attributeManager.AttributeManager();
  attributeManager.add({ positions: { size: 2, update: update } });

  // First update, should autoalloc and update the value array
  attributeManager.update({
    numInstances: 0,
    data: []
  });

  var attribute = attributeManager.getAttributes()['positions'];
  t.ok(ArrayBuffer.isView(attribute.value), 'attribute has typed array');

  t.end();
});
//# sourceMappingURL=data:application/json;base64,