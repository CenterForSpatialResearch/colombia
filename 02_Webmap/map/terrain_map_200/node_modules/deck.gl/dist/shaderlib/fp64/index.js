'use strict';

module.exports = {
  fp64: {
    interface: 'fp64',
    source: Buffer('', 'base64')
  }
}; /* eslint-disable quote-props, no-path-concat, prefer-template */
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NoYWRlcmxpYi9mcDY0L2luZGV4LmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJmcDY0IiwiaW50ZXJmYWNlIiwic291cmNlIl0sIm1hcHBpbmdzIjoiOztBQUVBQSxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZDLFFBQU07QUFDSkMsZUFBVyxNQURQO0FBRUpDO0FBRkk7QUFEUyxDQUFqQixDLENBRkEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBxdW90ZS1wcm9wcywgbm8tcGF0aC1jb25jYXQsIHByZWZlci10ZW1wbGF0ZSAqL1xudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBmcDY0OiB7XG4gICAgaW50ZXJmYWNlOiAnZnA2NCcsXG4gICAgc291cmNlOiBmcy5yZWFkRmlsZVN5bmMoX19kaXJuYW1lICsgJy9tYXRoLWZwNjQuZ2xzbCcpXG4gIH1cbn07XG4iXX0=